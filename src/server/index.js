"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
  return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// import { DefaultState, Context } from 'koa'
// import Router from 'koa-router'
// import bodyParser from 'koa-bodyparser'
// import send from 'koa-send'
const express_1 = __importDefault(require("express"));
const body_parser_1 = __importDefault(require("body-parser"));
const levelup_1 = __importDefault(require("levelup"));
const leveldown_1 = __importDefault(require("leveldown"));
const os_1 = __importDefault(require("os"));
const level = (s) => levelup_1.default(leveldown_1.default(s));
const db = new Map();
// const app = new Router<DefaultState, Context>()
const app = express_1.default.Router();
app.use(body_parser_1.default.json());
exports.default = app;
const gamesDir = `${os_1.default.homedir()}/.seraphim/games`;
const getDb = (s) => {
  if (!db.has(s)) {
    db.set(s, level(`${gamesDir}/${s}/db`));
  }
  return db.get(s);
};
app.post("/api/lst", async (req, res) => {
  const s = getDb(req.body.gameName).createKeyStream();
  res.send(
    await new Promise((res, rej) => {
      const lst = [];
      s.on("data", (d) => lst.push(d.toString()));
      s.on("end", () => res(lst));
    }),
  );
});
app.post("/api/read", async (req, res) => {
  res.send(await getDb(req.body.gameName).get(req.body.sectionName));
});
app.post("/api/write", async (req, res) => {
  // try {
  const db = getDb(req.body.gameName);
  await db.put(req.body.sectionName, req.body.content);
  // }
  // catch (e) {
  // 	ctx.throw(401)
  // }
  res.send("ok");
});
app.post("/api/del", async (req, res) => {
  const db = getDb(req.body.gameName);
  await db.del(req.body.sectionName);
  res.send("ok");
});
app.get("/res/:gameName/*", (req, res) => {
  // ctx.body = ctx.path
  res.sendFile(
    `${gamesDir}/${req.params.gameName}/res` +
      req.path.slice(req.params.gameName.length + 5),
  );
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDhDQUE4QztBQUM5QyxrQ0FBa0M7QUFDbEMsMENBQTBDO0FBQzFDLDhCQUE4QjtBQUM5QixzREFBNkI7QUFDN0IsOERBQW9DO0FBQ3BDLHNEQUE2QjtBQUM3QiwwREFBaUM7QUFDakMsNENBQW1CO0FBQ25CLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FBQyxpQkFBTyxDQUFDLG1CQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNsRCxNQUFNLEVBQUUsR0FBMEMsSUFBSSxHQUFHLEVBQUUsQ0FBQTtBQUMzRCxrREFBa0Q7QUFDbEQsTUFBTSxHQUFHLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQTtBQUM1QixHQUFHLENBQUMsR0FBRyxDQUFDLHFCQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtBQUMxQixrQkFBZSxHQUFHLENBQUE7QUFDbEIsTUFBTSxRQUFRLEdBQUcsR0FBRyxZQUFFLENBQUMsT0FBTyxFQUFFLGtCQUFrQixDQUFBO0FBQ2xELE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUU7SUFDM0IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtJQUN2RCxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDakIsQ0FBQyxDQUFBO0FBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUN2QyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtJQUNwRCxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDdkMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFBO1FBQ2QsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDekMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDNUIsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ0YsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUN4QyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQTtBQUNuRSxDQUFDLENBQUMsQ0FBQTtBQUNGLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDekMsUUFBUTtJQUNSLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3BELElBQUk7SUFDSixjQUFjO0lBQ2Qsa0JBQWtCO0lBQ2xCLElBQUk7SUFDSixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ2YsQ0FBQyxDQUFDLENBQUE7QUFDRixHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBQ3ZDLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ25DLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQ2xDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDZixDQUFDLENBQUMsQ0FBQTtBQUNGLEdBQUcsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7SUFDeEMsc0JBQXNCO0lBQ3RCLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxRQUFRLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUN4RyxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCB7IERlZmF1bHRTdGF0ZSwgQ29udGV4dCB9IGZyb20gJ2tvYSdcclxuLy8gaW1wb3J0IFJvdXRlciBmcm9tICdrb2Etcm91dGVyJ1xyXG4vLyBpbXBvcnQgYm9keVBhcnNlciBmcm9tICdrb2EtYm9keXBhcnNlcidcclxuLy8gaW1wb3J0IHNlbmQgZnJvbSAna29hLXNlbmQnXHJcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnXHJcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJ1xyXG5pbXBvcnQgbGV2ZWx1cCBmcm9tICdsZXZlbHVwJ1xyXG5pbXBvcnQgbGV2ZWxkb3duIGZyb20gJ2xldmVsZG93bidcclxuaW1wb3J0IG9zIGZyb20gJ29zJ1xyXG5jb25zdCBsZXZlbCA9IChzOiBzdHJpbmcpID0+IGxldmVsdXAobGV2ZWxkb3duKHMpKVxyXG5jb25zdCBkYjogTWFwPHN0cmluZywgUmV0dXJuVHlwZTx0eXBlb2YgbGV2ZWw+PiA9IG5ldyBNYXAoKVxyXG4vLyBjb25zdCBhcHAgPSBuZXcgUm91dGVyPERlZmF1bHRTdGF0ZSwgQ29udGV4dD4oKVxyXG5jb25zdCBhcHAgPSBleHByZXNzLlJvdXRlcigpXHJcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpXHJcbmV4cG9ydCBkZWZhdWx0IGFwcFxyXG5jb25zdCBnYW1lc0RpciA9IGAke29zLmhvbWVkaXIoKX0vLnNlcmFwaGltL2dhbWVzYFxyXG5jb25zdCBnZXREYiA9IChzOiBzdHJpbmcpID0+IHtcclxuXHRpZiAoIWRiLmhhcyhzKSkgZGIuc2V0KHMsIGxldmVsKGAke2dhbWVzRGlyfS8ke3N9L2RiYCkpXHJcblx0cmV0dXJuIGRiLmdldChzKVxyXG59XHJcbmFwcC5wb3N0KCcvYXBpL2xzdCcsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xyXG5cdGNvbnN0IHMgPSBnZXREYihyZXEuYm9keS5nYW1lTmFtZSkuY3JlYXRlS2V5U3RyZWFtKClcclxuXHRyZXMuc2VuZChhd2FpdCBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcclxuXHRcdGNvbnN0IGxzdCA9IFtdXHJcblx0XHRzLm9uKCdkYXRhJywgZCA9PiBsc3QucHVzaChkLnRvU3RyaW5nKCkpKVxyXG5cdFx0cy5vbignZW5kJywgKCkgPT4gcmVzKGxzdCkpXHJcblx0fSkpXHJcbn0pXHJcbmFwcC5wb3N0KCcvYXBpL3JlYWQnLCBhc3luYyAocmVxLCByZXMpID0+IHtcclxuXHRyZXMuc2VuZChhd2FpdCBnZXREYihyZXEuYm9keS5nYW1lTmFtZSkuZ2V0KHJlcS5ib2R5LnNlY3Rpb25OYW1lKSlcclxufSlcclxuYXBwLnBvc3QoJy9hcGkvd3JpdGUnLCBhc3luYyAocmVxLCByZXMpID0+IHtcclxuXHQvLyB0cnkge1xyXG5cdGNvbnN0IGRiID0gZ2V0RGIocmVxLmJvZHkuZ2FtZU5hbWUpXHJcblx0YXdhaXQgZGIucHV0KHJlcS5ib2R5LnNlY3Rpb25OYW1lLCByZXEuYm9keS5jb250ZW50KVxyXG5cdC8vIH1cclxuXHQvLyBjYXRjaCAoZSkge1xyXG5cdC8vIFx0Y3R4LnRocm93KDQwMSlcclxuXHQvLyB9XHJcblx0cmVzLnNlbmQoJ29rJylcclxufSlcclxuYXBwLnBvc3QoJy9hcGkvZGVsJywgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XHJcblx0Y29uc3QgZGIgPSBnZXREYihyZXEuYm9keS5nYW1lTmFtZSlcclxuXHRhd2FpdCBkYi5kZWwocmVxLmJvZHkuc2VjdGlvbk5hbWUpXHJcblx0cmVzLnNlbmQoJ29rJylcclxufSlcclxuYXBwLmdldCgnL3Jlcy86Z2FtZU5hbWUvKicsIChyZXEsIHJlcykgPT4ge1xyXG5cdC8vIGN0eC5ib2R5ID0gY3R4LnBhdGhcclxuXHRyZXMuc2VuZEZpbGUoYCR7Z2FtZXNEaXJ9LyR7cmVxLnBhcmFtcy5nYW1lTmFtZX0vcmVzYCArIHJlcS5wYXRoLnNsaWNlKHJlcS5wYXJhbXMuZ2FtZU5hbWUubGVuZ3RoICsgNSkpXHJcbn0pIl19
